#-------------------------------------------------------------------------------
#    http://rainbow.cs.unipi.gr/projects/seduce
#    ShellcodE Detection Using CPU Emulation
#    SEDUCE's sensor configuration file
#    Nikos Skalkotos <skalkoto@gmain.com>
#-------------------------------------------------------------------------------

# INTERFACE
# Through the interface variable you can specify the interface on which the
# sensor will listen for packets. If not set the sensor will choose the
# interface automatically. The special value "all" will results in the sensor
# trying to listen to capture packets on all interfaces.
# Default value = NOT_SET
#
# Example:
#interface = "eth0"

# HOME NETWORK
# Through the home_net variable you can specify the Home Network. If the homenet
# variable is specified packets that do not have either source or destination
# address inside the home network are discarded. Home Network should be
# specified in CIDR notation. You may specify multiple, comma seperated, lists
# of IP addresses for home network. If no Home Network is specified, all packets
# visible to the interface will be send to the scheduler.
# Default value: ""
#
# NOTE: When using a home network CIDR notation keep in mind that non-network
# 	bits shouldn't be set. For example 192.168.178.1/24 isn't correct.
# 	192.168.3.0/23 isn't either. The correct ones are 192.168.178.0/24 and
# 	192.168.2.0/23. This is a tcpdump caveat, so watch your step.
#
# Example:
#home_net = "192.168.178.0/24"

# PORT LIST
# This option is used to specify a list of ports. If a port list is specified
# any connection or packet that has destination port not include in the port
# list is discarded. Individual port numbers are OK, as are ranges separated by
# a hyphen (e.g. 1-1023). The beginning and/or end values of a range may be 
# omitted, causing the sensor to use 1 and 65535, respectively. You can also
# specify a particular IP protocol by preceding the port numbers by T: or U:.
# The qualifier lasts until you specify another qualifier. For example, a value
# of U:53,111,137,T:21-25,80,139,8080 would accept UDP packages with destination
# ports 53,111,and 137, as well as the listed TCP ports. If the option is
# ommited any destination port is acceptable.
# Default value = "1-65535"
#
# Example:
# portlist = "U:53,111,137,T:21-25,80,139,8080"

# AGENT_PORT
# Through this variable you can specify the port the managers's UDP server
# will listen for incomming UDP requests by the agents. The manager will also
# listen for TCP connections through this port to handle alerts send by agents.
# This port must be different from the sensor_port.
# Default value: 28001.
#
# Example:
#agent_port = 28001

# MAX_AGENTS
# The maximum number of agents that can be handled simultaneously
# Default value: 256
#
# Example:
#max_agents = 256

# MEM_HARDLIMIT
# The mem_hardlimit is the the maximum amount of memory allowed to be occupied
# by stored network data provieded by the sensors. If the memory occupied by
# stored data exceeds this limit the "Out Of Memory Handler" thread will wake up
# and will free memory occupied by unprocessed data, until the the memory usage
# drops under the mem_softlimit value (see below). The value is in MegaBytes
# Default value: NOT SET
#
# Example:
mem_hardlimit = 400

# MEM_SOFTLIMIT
# The mem_softlimit is the memory threshold under which the memory usage will be
# after the "Out of Memory Handler" has waken up (see above). The value is in
# MegaBytes.
# Default value: NOT SET
#
# Example:
mem_softlimit = 350

# PASSWORD
# In order for the manager to serve agent's UDP requests, the agent needs to
# provide a password the first time it communicates with the manager. If the
# password is wrong the manager will ignore any further requests made by this
# specific agent. Through this variable you can provide the password described
# above.
# Default value: NOT SET
#
# Example:
password = seduce


######################
# libnids parameters #
######################

# Size of the hash table used for storing TCP connection information (a maximum
# of 3/4 * n_tcp_streams TCP connections will be followed simultaneously).
# Default value: 1024
#
#n_tcp_streams = 1024

# Size of the hash table used for storing IP defragmentation information.
# Default value: 256
#
#n_hosts = 256

# It this variable is set, libnids will call pcap_open_offline with this
# variable as the argument (instead of pcap_open_live()).
# Default value: NOT SET
#
#filename = "filename"

# Size of struct sk_buff (used for queuing packets), which should be set to
# match the value on the hosts being monitored.
# Default value: 168
#
#sk_buff_size = 168

# Number of bytes in struct sk_buff reserved for link-layer information.
# Default value: -1 (in which case an appropriate offset is determined
# automatically based on link-layer type)
#
#dev_addon = -1

# If non-zero, libnids will set the interface(s) it listens on to promiscuous
# mode.
# Default value: 1
#
#promisc = true

# Disabled by default; see comments in API.html file
#
#one_loop_less = false

# Sets the pcap read timeout, which may or may not be supported by your
# platform.
# Default value: 1024.
#
#pcap_timeout = 1024

# If nonzero, creates a separate thread for packets processing. See API.html.
# Default value: false
#
#multiproc = false

# If multiproc is nonzero, this is the maximum number of packets queued in the
# thread which reads packets from libpcap.
# Default value: 20000
#
#queue_limit = 20000

# Enables extra checks for faulty implementations of TCP such as the ones which
# allow connections to be closed despite the fact that there should be
# retransmissions for lost packets first (as stated by RFC 793, section 3.5). If
# non-zero, libnids will set the NIDS_TIMED_OUT state for savagely closed
# connections.
# Default value: false
#
#tcp_workarounds = false

